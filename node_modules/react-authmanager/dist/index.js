"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const authActions = __importStar(require("./actions/authActions"));
const userActions = __importStar(require("./actions/userActions"));
const auth_1 = __importDefault(require("./hoc/auth"));
const guard_1 = __importDefault(require("./hoc/guard"));
const user_1 = __importDefault(require("./hoc/user"));
const store_1 = __importDefault(require("./store"));
class ReactAuth {
    constructor(name, config) {
        this._guards = {};
        const { constructor: { defaultConfig } } = Object.getPrototypeOf(this);
        this.config = Object.assign({}, defaultConfig, config);
        this.name = name;
        this.store = store_1.default();
        this.withAuth = auth_1.default(this);
        this.withUser = user_1.default(this);
        this.withGuard = guard_1.default(this);
        return this;
    }
    create(name, config) {
        return new ReactAuth(name, config);
    }
    get jwtName() {
        const { constructor: { jwtName } } = Object.getPrototypeOf(this);
        return this.name ? `${jwtName}_${this.name}` : jwtName;
    }
    getToken() {
        return localStorage.getItem(this.jwtName);
    }
    setToken(token) {
        localStorage.setItem(this.jwtName, token);
        return this;
    }
    deleteToken() {
        localStorage.removeItem(this.jwtName);
        return this;
    }
    addGuard(name, fn) {
        Object.assign(this._guards, { [name]: fn });
    }
    getGuard(name) {
        return this._guards[name];
    }
    // helpers
    login(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.store.dispatch(authActions.loginStart());
            try {
                const token = yield this.config.fetchToken(data);
                this.setToken(token);
                this.store.dispatch(authActions.loginEnd());
                return yield this.getUser();
            }
            catch (e) {
                this.store.dispatch(authActions.loginEnd());
                throw e;
            }
        });
    }
    logout() {
        this.store.dispatch(authActions.logoutStart());
        this.store.dispatch(userActions.reset());
        this.deleteToken();
        this.store.dispatch(authActions.logoutEnd());
        return true;
    }
    getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            this.store.dispatch(userActions.fetchStart());
            let data;
            try {
                data = yield this.config.fetchUser();
                data.logged = yield this.config.isUserLogged(data);
                this.store.dispatch(userActions.fetchSuccess(data));
            }
            catch (e) {
                this.store.dispatch(userActions.fetchError());
            }
            this.store.dispatch(userActions.fetchEnd());
            return data;
        });
    }
}
ReactAuth.jwtName = 'REACT-AUTH-JWT';
ReactAuth.defaultConfig = {
    fetchToken: () => null,
    fetchUser: () => null,
    isUserLogged: data => !!data && Object.keys(data).length > 0
};
exports.default = new ReactAuth();
//# sourceMappingURL=index.js.map