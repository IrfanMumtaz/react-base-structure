{"version":3,"sources":["views/booths/create.js","components/contentHead/contentHeader.js","app/config.js"],"names":["formSchema","Yup","shape","name","max","required","merchant_id","phone","full","Create","state","auth","store","getState","authentication","Auth","formValues","merchant","id","address","full_address","latitude","longitude","contact","merchants","alert","display","type","message","getMerchants","_callee","requestOptions","_home_imirfanmumtaz_www_react_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","method","headers","Content-Type","Authorization","concat","_this","token","fetch","config","base_url","then","handleResponse","response","success","data","setState","stop","createBooth","_callee2","_context2","props","match","params","email","body","JSON","stringify","error","handleSubmit","e","handleChange","target","value","handleResetForm","document","getElementById","reset","this","text","parse","_this2","_this$state","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","react__WEBPACK_IMPORTED_MODULE_7__","_components_contentHead_contentHeader__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","md","className","formik__WEBPACK_IMPORTED_MODULE_14__","initialValues","validationSchema","onSubmit","_ref3","setSubmitting","resetForm","_ref4","values","isSubmitting","errors","touched","react_feather__WEBPACK_IMPORTED_MODULE_12__","size","color","for","onChange","defaultValue","disabled","map","key","cnic","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ContentHeader","undefined","children","process"],"mappings":"0PAUMA,EAAaC,WAAaC,MAAM,CAClCC,KAAMF,WAAaG,IAAI,GAAI,+BAA+BC,SAAS,YACnEC,YAAaL,WAAaI,SAAS,YACnCE,MAAON,WAAaI,SAAS,YAC7BG,KAAMP,WAAaG,IAAI,IAAK,uBAAuBC,SAAS,cAG1DI,6MAEFC,MAAQ,CACJC,KAAMC,IAAMC,WAAWC,eAAeC,KACtCC,WAAY,CACRb,KAAM,GACNG,YAAa,KACbW,SAAU,CACNC,GAAI,MAERC,QAAS,CACLC,aAAc,GACdC,SAAU,UACVC,UAAW,WAEfC,QAAS,CACLhB,MAAO,MAEXA,MAAO,KACPC,KAAM,IAEVgB,UAAW,GACXC,MAAO,CACHC,SAAS,EACTC,KAAM,UACNC,QAAS,OAQjBC,kCAAe,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACLN,EAAiB,CACnBO,OAAQ,MACRC,QAAS,CACLC,eAAgB,mBAChBC,cAAA,UAAAC,OAA2BC,EAAKjC,MAAMC,KAAKiC,SAGnDC,MAAK,GAAAH,OAAII,IAAOC,SAAX,eAAkChB,GAClCiB,KAAKL,EAAKM,gBACVD,KAAK,SAAAE,GACF,IAAwB,IAArBA,EAASC,QAAiB,CACzB,IAAM3B,EAAY0B,EAASE,KAAK5B,UAChCmB,EAAKU,SAAS,CAAC7B,cAEnB,OAAO0B,IAfJ,wBAAAf,EAAAmB,SAAAxB,QAmBfyB,iCAAc,SAAAC,IAAA,IAAAxC,EAAAe,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OACKM,EAAKe,MAAMC,MAAMC,OAAxB1C,IACFF,EAAe2B,EAAKjC,MAApBM,YACKO,QAAU,CACjBhB,MAAOS,EAAWT,MAClBsD,MAAO,MAEX7C,EAAWG,QAAU,CACjBX,KAAMQ,EAAWR,KACjBa,SAAUL,EAAWG,QAAQE,SAC7BC,UAAWN,EAAWG,QAAQG,WAI5BS,EAAiB,CACnBO,OAAQ,OACRC,QAAS,CACLC,eAAgB,mBAChBC,cAAA,UAAAC,OAA2BC,EAAKjC,MAAMC,KAAKiC,QAE/CkB,KAAMC,KAAKC,UAAUhD,IAEzB6B,MAAK,GAAAH,OAAII,IAAOC,SAAX,YAA+BhB,GAC/BiB,KAAKL,EAAKM,gBACVD,KAAK,SAAAE,GACF,IAAwB,IAArBA,EAASC,QAAiB,CACzB,IAAM1B,EAAQ,CACVE,KAAM,UACNC,QAASsB,EAAStB,QAClBF,SAAS,GAEbiB,EAAKU,SAAS,CAAC5B,cAEf,CACA,IAAMA,EAAQ,CACVE,KAAM,SACNC,QAASsB,EAASe,MAAMrC,QACxBF,SAAS,GAEbiB,EAAKU,SAAS,CAAC5B,UAEnB,OAAOyB,IAzCL,wBAAAO,EAAAH,SAAAE,QAmDdU,aAAe,SAAAC,GACXxB,EAAKY,iBAGTa,aAAe,SAAAD,GAAK,IACRnD,EAAe2B,EAAKjC,MAApBM,WACRA,EAAWmD,EAAEE,OAAOlE,MAAQgE,EAAEE,OAAOC,MAErC3B,EAAKU,SAAS,CAACrC,kBAGnBuD,gBAAkB,WACdC,SAASC,eAAe,aAAaC,6FArFrCC,KAAK9C,sDAmEMqB,GACX,OAAOA,EAAS0B,OAAO5B,KAAK,SAAA4B,GACxB,OAAOA,GAAQb,KAAKc,MAAMD,sCAmBzB,IAAAE,EAAAH,KAAAI,EAC2BJ,KAAKjE,MAA9BM,EADF+D,EACE/D,WAAYQ,EADduD,EACcvD,UACnB,OACIwD,EAAA/C,EAAAgD,cAACC,EAAA,SAAD,KACIF,EAAA/C,EAAAgD,cAACE,EAAA,EAAD,sBAEAH,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAKC,GAAG,MACJL,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,QACXN,EAAA/C,EAAAgD,cAACM,EAAA,EAAD,CACIC,cAAexE,EACfyE,iBAAkBzF,EAClB0F,SAAU,SAACtC,EAADuC,GAAsC,IAA9BC,EAA8BD,EAA9BC,cAAeC,EAAeF,EAAfE,UAC7BD,GAAc,GACdd,EAAKzB,SAAS,CAACrC,WAAYoC,IAC3B0B,EAAKZ,eACL0B,GAAc,GACdC,MAGH,SAAAC,KAAGC,OAAH,IAAWC,EAAXF,EAAWE,aAAcC,EAAzBH,EAAyBG,OAAQC,EAAjCJ,EAAiCI,QAAS9B,EAA1C0B,EAA0C1B,aAA1C,OACGY,EAAA/C,EAAAgD,cAACM,EAAA,EAAD,CAAMrE,GAAG,aACL8D,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,aACXN,EAAA/C,EAAAgD,cAAA,MAAIK,UAAU,gBAAeN,EAAA/C,EAAAgD,cAACkB,EAAA,KAAD,CAAMC,KAAM,GAAIC,MAAM,YAAnD,eACArB,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAKC,GAAG,KACJL,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAOkB,IAAI,QAAX,cACAtB,EAAA/C,EAAAgD,cAACM,EAAA,EAAD,CAAOpF,KAAK,OAAOe,GAAG,OAAOoE,UAAS,gBAAA5C,OAAkBuD,EAAO9F,MAAQ+F,EAAQ/F,MAAQ,gBACtF8F,EAAO9F,MAAQ+F,EAAQ/F,KAAO6E,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,oBAAoBW,EAAO9F,MAAc,OAG/F6E,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAKC,GAAG,KACJL,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAOkB,IAAI,eAAX,YACAtB,EAAA/C,EAAAgD,cAAA,UAAQsB,SAAUnC,EAAclD,GAAG,cAAcf,KAAK,cAAcmF,UAAS,gBAAA5C,OAAkBuD,EAAO3F,aAAe4F,EAAQ5F,aAAe,eACxI0E,EAAA/C,EAAAgD,cAAA,UAAQX,MAAM,IAAIkC,aAAa,GAAGC,SAAS,IAA3C,eAEIjF,EAAUkF,IAAI,SAACzF,GAAD,OACV+D,EAAA/C,EAAAgD,cAAA,UAAQX,MAAOrD,EAASC,GAAIyF,IAAK1F,EAASC,IAA1C,GAAAwB,OAAmDzB,EAASd,KAA5D,MAAAuC,OAAqEzB,EAAS2F,KAA9E,SAIXX,EAAO3F,aAAe4F,EAAQ5F,YAAc0E,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,oBAAoBW,EAAO3F,aAAqB,QAIxH0E,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAKC,GAAG,KACJL,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAOkB,IAAI,SAAX,SACAtB,EAAA/C,EAAAgD,cAACM,EAAA,EAAD,CAAOrE,GAAG,QAAQf,KAAK,QAAQmF,UAAS,gBAAA5C,OAAkBuD,EAAO1F,OAAS2F,EAAQ3F,OAAS,gBAC1F0F,EAAO1F,OAAS2F,EAAQ3F,MAAQyE,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,oBAAoBW,EAAO1F,OAAe,OAGlGyE,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAKC,GAAG,KACJL,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,KACIJ,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAOkB,IAAI,QAAX,WACAtB,EAAA/C,EAAAgD,cAACM,EAAA,EAAD,CAAOpF,KAAK,OAAOe,GAAG,eAAeoE,UAAS,gBAAA5C,OAAkBuD,EAAOzF,MAAQ0F,EAAQ1F,MAAQ,gBAC9FyF,EAAOzF,MAAQ0F,EAAQ1F,KAAOwE,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,oBAAoBW,EAAOzF,MAAc,SAOvGwE,EAAA/C,EAAAgD,cAAA,OAAKK,UAAU,gBACXN,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAQiB,MAAM,UAAU1E,KAAK,SAAS8E,SAAUT,GAC5ChB,EAAA/C,EAAAgD,cAACkB,EAAA,YAAD,CAAaC,KAAM,GAAIC,MAAM,SADjC,SAGIvB,EAAKpE,MAAMe,MAAMC,SACrBsD,EAAA/C,EAAAgD,cAACG,EAAA,EAAD,CAAOiB,MAAOvB,EAAKpE,MAAMe,MAAME,MAC1BmD,EAAKpE,MAAMe,MAAMG,0BAhMrDiF,aAiNNpG,6CClOf,IAAAqG,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAeeI,IAbO,SAAAxD,GAAS,IACtB4B,EAAa5B,EAAb4B,UACN,OACG0B,EAAA/E,EAAAgD,cAAA,OACGK,UAAS,iBAAA5C,YACQyE,IAAd7B,EAA0B,GAA1B,IAAA5C,OAAmC4C,KAGrC5B,EAAM0D,4CCNDtE,IAJA,CACXC,SAAUsE","file":"static/js/28.63e977c0.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport config from \"../../app/config\";\nimport {store} from \"../../redux/storeConfig/store\";\nimport ContentHeader from \"../../components/contentHead/contentHeader\";\nimport {Alert, Button, Card, CardBody, CardTitle, Col, FormGroup, Input, Label, Row} from \"reactstrap\";\nimport {CheckSquare, FileText, Info, Mail, X, Home} from \"react-feather\";\nimport { useForm } from 'react-hook-form'\nimport {Field, Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\n\nconst formSchema = Yup.object().shape({\n    name: Yup.string().max(50, \"Too long, max 50 characters\").required(\"Required\"),\n    merchant_id: Yup.number().required(\"Required\"),\n    phone: Yup.number().required(\"Required\"),\n    full: Yup.string().max(190, 'Address is too long').required(\"Required\")\n});\n\nclass Create extends Component {\n\n    state = {\n        auth: store.getState().authentication.Auth,\n        formValues: {\n            name: '',\n            merchant_id: null,\n            merchant: {\n                id: null\n            },\n            address: {\n                full_address: '',\n                latitude: 55.442211,\n                longitude: 55.442211\n            },\n            contact: {\n                phone: null\n            },\n            phone: null,\n            full: ''\n        },\n        merchants: [],\n        alert: {\n            display: false,\n            type: \"success\",\n            message: \"\"\n        }\n    };\n\n    componentWillMount() {\n        this.getMerchants();\n    }\n\n    getMerchants = async () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${this.state.auth.token}`\n            }\n        };\n        fetch(`${config.base_url}v1/merchant`, requestOptions)\n            .then(this.handleResponse)\n            .then(response => {\n                if(response.success === true){\n                    const merchants = response.data.merchants;\n                    this.setState({merchants });\n                }\n                return response;\n            });\n    };\n\n    createBooth = async () => {\n        const { id } = this.props.match.params;\n        let { formValues } = this.state;\n        formValues.contact = {\n            phone: formValues.phone,\n            email: null\n        };\n        formValues.address = {\n            full: formValues.full,\n            latitude: formValues.address.latitude,\n            longitude: formValues.address.longitude,\n        };\n\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${this.state.auth.token}`\n            },\n            body: JSON.stringify(formValues)\n        };\n        fetch(`${config.base_url}v1/booth`, requestOptions)\n            .then(this.handleResponse)\n            .then(response => {\n                if(response.success === true){\n                    const alert = {\n                        type: \"success\",\n                        message: response.message,\n                        display: true\n                    };\n                    this.setState({alert});\n                }\n                else{\n                    const alert = {\n                        type: \"danger\",\n                        message: response.error.message,\n                        display: true\n                    };\n                    this.setState({alert});\n                }\n                return response;\n            });\n    };\n\n    handleResponse(response) {\n        return response.text().then(text => {\n            return text && JSON.parse(text);\n        });\n    }\n\n    handleSubmit = e => {\n        this.createBooth();\n    };\n\n    handleChange = e => {\n        const { formValues } = this.state;\n        formValues[e.target.name] = e.target.value;\n\n        this.setState({formValues})\n    };\n\n    handleResetForm = () => {\n        document.getElementById(\"boothForm\").reset();\n    };\n\n    render() {\n        const {formValues, merchants} = this.state;\n        return (\n            <Fragment>\n                <ContentHeader>Booth Update </ContentHeader>\n\n                <Row>\n                    <Col md=\"12\">\n                        <Card>\n                            <CardBody>\n                                <div className=\"px-3\">\n                                    <Formik\n                                        initialValues={formValues}\n                                        validationSchema={formSchema}\n                                        onSubmit={(data, {setSubmitting, resetForm}) => {\n                                            setSubmitting(true);\n                                            this.setState({formValues: data});\n                                            this.handleSubmit();\n                                            setSubmitting(false);\n                                            resetForm();\n                                        }}\n                                    >\n                                        {({ values, isSubmitting, errors, touched, handleChange}) => (\n                                            <Form id=\"boothForm\">\n                                                <div className=\"form-body\">\n                                                    <h4 className=\"form-section\"><Home size={20} color=\"#212529\" /> Booth Info</h4>\n                                                    <Row>\n                                                        <Col md=\"6\">\n                                                            <FormGroup>\n                                                                <Label for=\"name\">Booth Name</Label>\n                                                                <Field name=\"name\" id=\"name\" className={`form-control ${errors.name && touched.name && 'is-invalid'}`}/>\n                                                                {errors.name && touched.name ? <div className=\"invalid-feedback\">{errors.name}</div> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"6\">\n                                                            <FormGroup>\n                                                                <Label for=\"merchant_id\">Merchant</Label>\n                                                                <select onChange={handleChange} id=\"merchant_id\" name=\"merchant_id\" className={`form-control ${errors.merchant_id && touched.merchant_id && 'is-invalid'}`}>\n                                                                    <option value=\"0\" defaultValue=\"\" disabled=\"\">Select Type</option>\n                                                                    {\n                                                                        merchants.map((merchant) => (\n                                                                            <option value={merchant.id} key={merchant.id} >{`${merchant.name} (${merchant.cnic})`}</option>\n                                                                        ))\n                                                                    }\n                                                                </select>\n                                                                {errors.merchant_id && touched.merchant_id ? <div className=\"invalid-feedback\">{errors.merchant_id}</div> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </Row>\n                                                    <Row>\n                                                        <Col md=\"6\">\n                                                            <FormGroup>\n                                                                <Label for=\"phone\">Phone</Label>\n                                                                <Field id=\"phone\" name=\"phone\" className={`form-control ${errors.phone && touched.phone && 'is-invalid'}`} />\n                                                                {errors.phone && touched.phone ? <div className=\"invalid-feedback\">{errors.phone}</div> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"6\">\n                                                            <FormGroup>\n                                                                <Label for=\"full\">Address</Label>\n                                                                <Field name=\"full\" id=\"full_address\" className={`form-control ${errors.full && touched.full && 'is-invalid'}`} />\n                                                                {errors.full && touched.full ? <div className=\"invalid-feedback\">{errors.full}</div> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </Row>\n\n                                                </div>\n\n                                                <div className=\"form-actions\">\n                                                    <Button color=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                                                        <CheckSquare size={16} color=\"#FFF\" /> Save\n                                                    </Button>\n                                                    {   this.state.alert.display &&\n                                                    <Alert color={this.state.alert.type} >\n                                                        {this.state.alert.message}\n                                                    </Alert>\n                                                    }\n                                                </div>\n                                            </Form>\n                                        )}\n                                    </Formik>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Fragment>\n        );\n    }\n}\n\nexport default Create;\n","import React from \"react\";\n\nconst ContentHeader = props => {\n  const {className} = props;\n   return (\n      <div\n         className={`content-header${\n            className === undefined ? \"\" : ` ${className}`\n         }`}\n      >\n         {props.children}\n      </div>\n   );\n};\n\nexport default ContentHeader;\n","const config = {\n    base_url: process.env.REACT_APP_API_URL\n}\n\nexport default config;"],"sourceRoot":""}