{"version":3,"sources":["views/tickets/edit.js","components/contentHead/contentHeader.js","app/config.js"],"names":["formSchema","Yup","shape","code","max","required","merchant_id","passenger_id","issuance","expiry","status","min","kin_name","kin_relation","kin_contact","pickup_add","dropoff_add","Edit","state","auth","store","getState","authentication","Auth","formValues","merchant","id","name","passenger","pickup","full_address","dropoff","passengers","STATUS","Array","alert","display","type","message","getPassengers","_callee","requestOptions","_home_imirfanmumtaz_www_react_apex_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","method","headers","Content-Type","Authorization","concat","_this","token","fetch","config","base_url","then","handleResponse","response","success","data","setState","stop","getTicket","_callee2","_context2","props","match","params","ticket","updateTicket","_callee3","_context3","full","latitude","longitude","console","log","body","JSON","stringify","error","handleSubmit","e","handleChange","target","value","handleResetForm","document","getElementById","reset","this","text","parse","_this2","_this$state","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","react__WEBPACK_IMPORTED_MODULE_7__","_components_contentHead_contentHeader__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","md","className","formik__WEBPACK_IMPORTED_MODULE_14__","enableReinitialize","initialValues","validationSchema","onSubmit","_ref4","setSubmitting","resetForm","_ref5","values","isSubmitting","errors","touched","react_feather__WEBPACK_IMPORTED_MODULE_12__","size","color","for","disabled","onChange","defaultValue","map","key","selected","cnic","st","index","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ContentHeader","undefined","children","process"],"mappings":"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","file":"static/js/34.1b1f8a2f.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport config from \"../../app/config\";\nimport {store} from \"../../redux/storeConfig/store\";\nimport ContentHeader from \"../../components/contentHead/contentHeader\";\nimport {Alert, Button, Card, CardBody, CardTitle, Col, FormGroup, Input, Label, Row} from \"reactstrap\";\nimport {CheckSquare, FileText, Info, Mail, X, Home} from \"react-feather\";\nimport { useForm } from 'react-hook-form'\nimport {Field, Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\n\nconst formSchema = Yup.object().shape({\n    code: Yup.string().max(50, \"Too long, max 50 characters\").required(\"Required\"),\n    merchant_id: Yup.number().required(\"Required\"),\n    passenger_id: Yup.number().required(\"Required\"),\n    issuance: Yup.date().required(\"Required\"),\n    expiry: Yup.date().required(\"Required\"),\n    status: Yup.number().max(3).min(0).required(\"Required\"),\n    kin_name: Yup.string().max(50, \"Too long, max 50 characters\").required(\"Required\"),\n    kin_relation: Yup.string().max(50, \"Too long, max 50 characters\").required(\"Required\"),\n    kin_contact: Yup.string().max(50, \"Too long, max 50 characters\").required(\"Required\"),\n    pickup_add: Yup.string().max(190, \"Pickup address too long.\").required(\"Required\"),\n    dropoff_add: Yup.string().max(190, \"Dropoff address too long.\").required(\"Required\"),\n});\n\nclass Edit extends Component {\n\n    state = {\n        auth: store.getState().authentication.Auth,\n        formValues: {\n            code: '',\n            issuance: '',\n            expiry: '',\n            status: null,\n            kin_name: '',\n            kin_relation: '',\n            kin_contact: '',\n            merchant_id: null,\n            passenger_id: null,\n            pickup_add: '',\n            dropoff_add: '',\n            merchant:{\n                id: null,\n                name: ''\n            },\n            passenger:{\n                id: null,\n                name: ''\n            },\n            pickup: {\n                full_address: ''\n            },\n            dropoff: {\n                full_address: ''\n            }\n        },\n        passengers: [],\n        STATUS: new Array(\"Expired\", 'Active', \"Refunded\", \"Claimed\"),\n        alert: {\n            display: false,\n            type: \"success\",\n            message: \"\"\n        }\n    };\n\n    componentWillMount() {\n        this.getPassengers();\n        this.getTicket();\n    }\n\n    getPassengers = async () => {\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${this.state.auth.token}`\n            }\n        };\n        fetch(`${config.base_url}v1/passenger`, requestOptions)\n            .then(this.handleResponse)\n            .then(response => {\n                if(response.success === true){\n                    const {passengers} = response.data;\n                    this.setState({passengers });\n                }\n                return response;\n            });\n    };\n\n    getTicket = async () => {\n        const { id } = this.props.match.params;\n        const { formValues } = this.state;\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${this.state.auth.token}`\n            }\n        };\n        fetch(`${config.base_url}v1/ticket/${id}`, requestOptions)\n            .then(this.handleResponse)\n            .then(response => {\n                if(response.success === true){\n                    let formValues = response.data.ticket;\n                    formValues.merchant_id = formValues.merchant.id;\n                    formValues.passenger_id = formValues.passenger.id;\n                    formValues.pickup_add = formValues.pickup.full_address;\n                    formValues.dropoff_add = formValues.dropoff.full_address;\n                    this.setState({formValues });\n                }\n                return response;\n            });\n    };\n\n    updateTicket = async () => {\n        const { id } = this.props.match.params;\n        let { formValues } = this.state;\n        formValues.pickup = {\n            full: formValues.pickup_add,\n            latitude: 54.2211,\n            longitude: 54.2211,\n        };\n\n        formValues.dropoff = {\n            full: formValues.dropoff_add,\n            latitude: 54.2211,\n            longitude: 54.2211,\n        };\n\n        console.log(formValues);\n\n\n        const requestOptions = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Authorization\": `Bearer ${this.state.auth.token}`\n            },\n            body: JSON.stringify(formValues)\n        };\n        fetch(`${config.base_url}v1/ticket/${id}`, requestOptions)\n            .then(this.handleResponse)\n            .then(response => {\n                if(response.success === true){\n                    const alert = {\n                        type: \"success\",\n                        message: response.message,\n                        display: true\n                    };\n                    this.setState({alert});\n                }\n                else{\n                    const alert = {\n                        type: \"danger\",\n                        message: response.error.message,\n                        display: true\n                    };\n                    this.setState({alert});\n                }\n                return response;\n            });\n    };\n\n    handleResponse(response) {\n        return response.text().then(text => {\n            return text && JSON.parse(text);\n        });\n    }\n\n    handleSubmit = e => {\n        this.updateTicket();\n    };\n\n    handleChange = e => {\n        const { formValues } = this.state;\n        formValues[e.target.name] = e.target.value;\n\n        this.setState({formValues})\n    };\n\n    handleResetForm = () => {\n        document.getElementById(\"form\").reset();\n    };\n\n    render() {\n        const {STATUS, formValues, passengers} = this.state;\n        return (\n            <Fragment>\n                <ContentHeader>Ticket Update </ContentHeader>\n\n                <Row>\n                    <Col md=\"12\">\n                        <Card>\n                            <CardBody>\n                                <div className=\"px-3\">\n                                    <Formik\n                                        enableReinitialize={true}\n                                        initialValues={formValues}\n                                        validationSchema={formSchema}\n                                        onSubmit={(data, {setSubmitting, resetForm}) => {\n                                            setSubmitting(true);\n                                            this.setState({formValues: data});\n                                            this.handleSubmit();\n                                            setSubmitting(false);\n                                            resetForm();\n                                        }}\n                                    >\n                                        {({ values, isSubmitting, errors, touched, handleChange}) => (\n                                            <Form id=\"form\">\n                                        <div className=\"form-body\">\n                                            <h4 className=\"form-section\"><Home size={20} color=\"#212529\" /> Ticket Info</h4>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"name\">Ticket Code</Label>\n                                                        <Field name=\"code\" id=\"code\" value={values.code} disabled={true} className={`form-control ${errors.name && touched.name && 'is-invalid'}`}/>\n                                                        {errors.code && touched.code ? <div className=\"invalid-feedback\">{errors.code}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"passenger_id\">Passenger</Label>\n                                                        <select onChange={handleChange} id=\"passenger_id\" name=\"passenger_id\" className={`form-control ${errors.passenger_id && touched.passenger_id && 'is-invalid'}`}>\n                                                            <option value=\"0\" defaultValue=\"\" disabled=\"\">Select Passenger</option>\n                                                            {\n                                                                passengers.map((passenger) => (\n                                                                    <option value={passenger.id} key={passenger.id} selected={passenger.id === formValues.passenger.id}>{`${passenger.name} (${passenger.cnic})`}</option>\n                                                                ))\n                                                            }\n                                                        </select>\n                                                        {errors.passenger_id && touched.passenger_id ? <div className=\"invalid-feedback\">{errors.passenger_id}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"issuance\">Issuance</Label>\n                                                        <Input id=\"issuance\" type=\"date\" value={formValues.issuance} name=\"issuance\" className={`form-control ${errors.issuance && touched.issuance && 'is-invalid'}`} />\n                                                        {errors.issuance && touched.issuance ? <div className=\"invalid-feedback\">{errors.issuance}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"expiry\">Expiry</Label>\n                                                        <Input name=\"expiry\" type=\"date\" value={formValues.expiry} id=\"expiry\" className={`form-control ${errors.expiry && touched.expiry && 'is-invalid'}`} />\n                                                        {errors.expiry && touched.expiry ? <div className=\"invalid-feedback\">{errors.expiry}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"status\">Status</Label>\n                                                        <select onChange={handleChange} id=\"status\" name=\"status\" className={`form-control ${errors.status && touched.status && 'is-invalid'}`}>\n                                                            <option value=\"-1\" defaultValue=\"\" disabled=\"\">Select Status</option>\n                                                            {\n                                                                STATUS.map((st, index) => (\n                                                                    <option value={index} key={index} selected={index === formValues.status}>{`${st}`}</option>\n                                                                ))\n                                                            }\n                                                        </select>\n                                                        {errors.passenger_id && touched.passenger_id ? <div className=\"invalid-feedback\">{errors.passenger_id}</div> : null}\n\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"kin_name\">Kin Name</Label>\n                                                        <Input id=\"kin_name\" value={formValues.kin_name} name=\"kin_name\" className={`form-control  ${errors.kin_name && touched.kin_name && 'is-invalid'}`} />\n                                                        {errors.kin_name && touched.kin_name ? <div className=\"invalid-feedback\">{errors.kin_name}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"kin_relation\">Kin Relation</Label>\n                                                        <Input name=\"kin_relation\" value={formValues.kin_relation} id=\"kin_relation\" className={`form-control  ${errors.kin_relation && touched.kin_relation && 'is-invalid'}`} />\n                                                        {errors.kin_relation && touched.kin_relation ? <div className=\"invalid-feedback\">{errors.kin_relation}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <FormGroup>\n                                                        <Label for=\"kin_contact\">Kin Contact</Label>\n                                                        <Input name=\"kin_contact\" value={formValues.kin_contact} id=\"kin_contact\" className={`form-control  ${errors.kin_contact && touched.kin_contact && 'is-invalid'}`} />\n                                                        {errors.kin_contact && touched.kin_contact ? <div className=\"invalid-feedback\">{errors.kin_contact}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"pickup_add\">Pickup</Label>\n                                                        <Input id=\"pickup_add\" value={formValues.pickup_add} name=\"pickup_add\" className={`form-control  ${errors.pickup_add && touched.pickup_add && 'is-invalid'}`} />\n                                                        {errors.pickup_add && touched.pickup_add ? <div className=\"invalid-feedback\">{errors.pickup_add}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"dropoff_add\">Dropoff</Label>\n                                                        <Input name=\"dropoff_add\" value={formValues.dropoff_add} id=\"dropoff_add\" className={`form-control  ${errors.dropoff_add && touched.dropoff_add && 'is-invalid'}`} />\n                                                        {errors.dropoff_add && touched.dropoff_add ? <div className=\"invalid-feedback\">{errors.dropoff_add}</div> : null}\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n\n                                        </div>\n\n                                        <div className=\"form-actions\">\n                                            <Button color=\"primary\" type=\"submit\" disabled={isSubmitting}>\n                                                <CheckSquare size={16} color=\"#FFF\" /> Save\n                                            </Button>\n                                            {   this.state.alert.display &&\n                                                <Alert color={this.state.alert.type} >\n                                                    {this.state.alert.message}\n                                                </Alert>\n                                            }\n                                        </div>\n                                    </Form>\n                                        )}\n                                    </Formik>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Fragment>\n        );\n    }\n}\n\nexport default Edit;\n","import React from \"react\";\n\nconst ContentHeader = props => {\n  const {className} = props;\n   return (\n      <div\n         className={`content-header${\n            className === undefined ? \"\" : ` ${className}`\n         }`}\n      >\n         {props.children}\n      </div>\n   );\n};\n\nexport default ContentHeader;\n","const config = {\n    base_url: process.env.REACT_APP_API_URL\n}\n\nexport default config;"],"sourceRoot":""}